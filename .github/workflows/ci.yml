# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
---
name: Tests
on:  # yamllint disable-line rule:truthy
  schedule:
    - cron: '28 1,7,13,19 * * *'
  push:
    branches:
      - v[0-9]+-[0-9]+-test
      - providers-[a-z]+-?[a-z]*/v[0-9]+-[0-9]+
  pull_request:
    branches:
      - main
      - v[0-9]+-[0-9]+-test
      - v[0-9]+-[0-9]+-stable
      - providers-[a-z]+-?[a-z]*/v[0-9]+-[0-9]+
    types: [opened, reopened, synchronize, ready_for_review]
  workflow_dispatch:
permissions:
  # All other permissions are set to none by default
  contents: read
env:
  GITHUB_REPOSITORY: ${{ github.repository }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GITHUB_USERNAME: ${{ github.actor }}
  SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
  VERBOSE: "true"

concurrency:
  group: ci-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:

  build-info:
    name: "Build info"
    # At build-info stage we do not yet have outputs so we need to hard-code the runs-on to public runners
    runs-on: ["ubuntu-22.04"]
    env:
      GITHUB_CONTEXT: ${{ toJson(github) }}
    outputs:
      all-python-versions-list-as-string: >-
        ${{ steps.selective-checks.outputs.all-python-versions-list-as-string }}
      basic-checks-only: ${{ steps.selective-checks.outputs.basic-checks-only }}
      canary-run: ${{ steps.source-run-info.outputs.canary-run }}
      chicken-egg-providers: ${{ steps.selective-checks.outputs.chicken-egg-providers }}
      ci-image-build: ${{ steps.selective-checks.outputs.ci-image-build }}
      core-test-types-list-as-string: >-
        ${{ steps.selective-checks.outputs.core-test-types-list-as-string }}
      debug-resources: ${{ steps.selective-checks.outputs.debug-resources }}
      default-branch: ${{ steps.selective-checks.outputs.default-branch }}
      default-constraints-branch: ${{ steps.selective-checks.outputs.default-constraints-branch }}
      default-helm-version: ${{ steps.selective-checks.outputs.default-helm-version }}
      default-kind-version: ${{ steps.selective-checks.outputs.default-kind-version }}
      default-kubernetes-version: ${{ steps.selective-checks.outputs.default-kubernetes-version }}
      default-mysql-version: ${{ steps.selective-checks.outputs.default-mysql-version }}
      default-postgres-version: ${{ steps.selective-checks.outputs.default-postgres-version }}
      default-python-version: ${{ steps.selective-checks.outputs.default-python-version }}
      disable-airflow-repo-cache: ${{ steps.selective-checks.outputs.disable-airflow-repo-cache }}
      docker-cache: ${{ steps.selective-checks.outputs.docker-cache }}
      docs-build: ${{ steps.selective-checks.outputs.docs-build }}
      docs-list-as-string: ${{ steps.selective-checks.outputs.docs-list-as-string }}
      excluded-providers-as-string: ${{ steps.selective-checks.outputs.excluded-providers-as-string }}
      force-pip: ${{ steps.selective-checks.outputs.force-pip }}
      full-tests-needed: ${{ steps.selective-checks.outputs.full-tests-needed }}
      has-migrations: ${{ steps.selective-checks.outputs.has-migrations }}
      helm-test-packages: ${{ steps.selective-checks.outputs.helm-test-packages }}
      include-success-outputs: ${{ steps.selective-checks.outputs.include-success-outputs }}
      individual-providers-test-types-list-as-string: >-
        ${{ steps.selective-checks.outputs.individual-providers-test-types-list-as-string }}
      is-airflow-runner: ${{ steps.selective-checks.outputs.is-airflow-runner }}
      is-amd-runner: ${{ steps.selective-checks.outputs.is-amd-runner }}
      is-arm-runner: ${{ steps.selective-checks.outputs.is-arm-runner }}
      is-k8s-runner: ${{ steps.selective-checks.outputs.is-k8s-runner }}
      is-self-hosted-runner: ${{ steps.selective-checks.outputs.is-self-hosted-runner }}
      is-vm-runner: ${{ steps.selective-checks.outputs.is-vm-runner }}
      kubernetes-combos: ${{ steps.selective-checks.outputs.kubernetes-combos }}
      kubernetes-combos-list-as-string: >-
        ${{ steps.selective-checks.outputs.kubernetes-combos-list-as-string }}
      kubernetes-versions-list-as-string: >-
        ${{ steps.selective-checks.outputs.kubernetes-versions-list-as-string }}
      latest-versions-only: ${{ steps.selective-checks.outputs.latest-versions-only }}
      mypy-checks: ${{ steps.selective-checks.outputs.mypy-checks }}
      mysql-exclude: ${{ steps.selective-checks.outputs.mysql-exclude }}
      mysql-versions: ${{ steps.selective-checks.outputs.mysql-versions }}
      needs-api-codegen: ${{ steps.selective-checks.outputs.needs-api-codegen }}
      needs-api-tests: ${{ steps.selective-checks.outputs.needs-api-tests }}
      needs-helm-tests: ${{ steps.selective-checks.outputs.needs-helm-tests }}
      needs-mypy: ${{ steps.selective-checks.outputs.needs-mypy }}
      only-new-ui-files: ${{ steps.selective-checks.outputs.only-new-ui-files }}
      postgres-exclude: ${{ steps.selective-checks.outputs.postgres-exclude }}
      postgres-versions: ${{ steps.selective-checks.outputs.postgres-versions }}
      prod-image-build: ${{ steps.selective-checks.outputs.prod-image-build }}
      # yamllint disable rule:line-length
      providers-compatibility-tests-matrix: ${{ steps.selective-checks.outputs.providers-compatibility-tests-matrix }}
      providers-test-types-list-as-string: >-
        ${{ steps.selective-checks.outputs.providers-test-types-list-as-string }}
      pull-request-labels: ${{ steps.source-run-info.outputs.pr-labels }}
      python-versions-list-as-string: ${{ steps.selective-checks.outputs.python-versions-list-as-string }}
      python-versions: ${{ steps.selective-checks.outputs.python-versions }}
      run-amazon-tests: ${{ steps.selective-checks.outputs.run-amazon-tests }}
      run-coverage: ${{ steps.source-run-info.outputs.run-coverage }}
      run-kubernetes-tests: ${{ steps.selective-checks.outputs.run-kubernetes-tests }}
      run-task-sdk-tests: ${{ steps.selective-checks.outputs.run-task-sdk-tests }}
      run-system-tests: ${{ steps.selective-checks.outputs.run-system-tests }}
      run-tests: ${{ steps.selective-checks.outputs.run-tests }}
      run-ui-tests: ${{ steps.selective-checks.outputs.run-ui-tests }}
      run-www-tests: ${{ steps.selective-checks.outputs.run-www-tests }}
      runs-on-as-json-default: ${{ steps.selective-checks.outputs.runs-on-as-json-default }}
      runs-on-as-json-docs-build: ${{ steps.selective-checks.outputs.runs-on-as-json-docs-build }}
      runs-on-as-json-public: ${{ steps.selective-checks.outputs.runs-on-as-json-public }}
      runs-on-as-json-self-hosted-asf: ${{ steps.selective-checks.outputs.runs-on-as-json-self-hosted-asf }}
      runs-on-as-json-self-hosted: ${{ steps.selective-checks.outputs.runs-on-as-json-self-hosted }}
      selected-providers-list-as-string: >-
        ${{ steps.selective-checks.outputs.selected-providers-list-as-string }}
      skip-pre-commits: ${{ steps.selective-checks.outputs.skip-pre-commits }}
      skip-providers-tests: ${{ steps.selective-checks.outputs.skip-providers-tests }}
      source-head-repo: ${{ steps.source-run-info.outputs.source-head-repo }}
      sqlite-exclude: ${{ steps.selective-checks.outputs.sqlite-exclude }}
      test-groups: ${{ steps.selective-checks.outputs.test-groups }}
      testable-core-integrations: ${{ steps.selective-checks.outputs.testable-core-integrations }}
      testable-providers-integrations: ${{ steps.selective-checks.outputs.testable-providers-integrations }}
      use-uv: ${{ steps.selective-checks.outputs.force-pip == 'true' && 'false' || 'true' }}
      upgrade-to-newer-dependencies: ${{ steps.selective-checks.outputs.upgrade-to-newer-dependencies }}
    steps:
      - name: "Cleanup repo"
        shell: bash
        run: docker run -v "${GITHUB_WORKSPACE}:/workspace" -u 0:0 bash -c "rm -rf /workspace/*"
      - name: "Checkout ${{ github.ref }} ( ${{ github.sha }} )"
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: "Cleanup docker"
        run: ./scripts/ci/cleanup_docker.sh
      - name: Fetch incoming commit ${{ github.sha }} with its parent
        uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}
          fetch-depth: 2
          persist-credentials: false
      - name: "Install Breeze"
        uses: ./.github/actions/breeze
        with:
          use-uv: ${{ inputs.use-uv }}
        id: breeze
      - name: "Get information about the Workflow"
        id: source-run-info
        run: breeze ci get-workflow-info 2>> ${GITHUB_OUTPUT}
        env:
          SKIP_BREEZE_SELF_UPGRADE_CHECK: "true"
      - name: Selective checks
        id: selective-checks
        env:
          PR_LABELS: "${{ steps.source-run-info.outputs.pr-labels }}"
          COMMIT_REF: "${{ github.sha }}"
          VERBOSE: "false"
        run: breeze ci selective-check 2>> ${GITHUB_OUTPUT}
      - name: env
        run: printenv
        env:
          PR_LABELS: ${{ steps.source-run-info.outputs.pr-labels }}
          GITHUB_CONTEXT: ${{ toJson(github) }}

  build-ci-images:
    name: Build CI images
    needs: [build-info]
    runs-on: ${{ fromJSON(needs.build-info.outputs.runs-on-as-json-public) }}
    permissions:
      contents: read
      packages: write
    if: needs.build-info.outputs.ci-image-build == 'true'
    steps:
      - name: "Checkout ${{ github.ref }} ( ${{ github.sha }} )"
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: "Check if CI image exists"
        id: check-image
        run: |
          IMAGE_NAME="ghcr.io/${{ github.repository }}/ci-image:python-3.9"  # Hardcoded 3.9
          if docker pull "$IMAGE_NAME" 2>/dev/null; then
            echo "Image exists, skipping build"
            echo "image_exists=true" >> $GITHUB_OUTPUT
          else
            echo "Image does not exist, will build"
            echo "image_exists=false" >> $GITHUB_OUTPUT
          fi
      - name: "Build and Push CI Image"
        if: steps.check-image.outputs.image_exists == 'false'
        uses: ./.github/workflows/ci-image-build.yml
        with:
          runs-on-as-json-public: ${{ needs.build-info.outputs.runs-on-as-json-public }}
          runs-on-as-json-self-hosted: ${{ needs.build-info.outputs.runs-on-as-json-self-hosted }}
          platform: "linux/amd64"
          push-image: "true"
          upload-image-artifact: "false"
          python-versions: '["3.9"]'
          branch: ${{ needs.build-info.outputs.default-branch }}
          use-uv: ${{ needs.build-info.outputs.use-uv }}
          upgrade-to-newer-dependencies: ${{ needs.build-info.outputs.upgrade-to-newer-dependencies }}
          constraints-branch: ${{ needs.build-info.outputs.default-constraints-branch }}
          docker-cache: ${{ needs.build-info.outputs.docker-cache }}
          disable-airflow-repo-cache: ${{ needs.build-info.outputs.disable-airflow-repo-cache }}

  tests-integration-system:
    name: Integration and System Tests
    needs: [build-info, build-ci-images]
    runs-on: ${{ fromJSON(needs.build-info.outputs.runs-on-as-json-public) }}
    timeout-minutes: 130
    if: needs.build-info.outputs.run-tests == 'true'
    env:
      BACKEND: "postgres"
      BACKEND_VERSION: ${{ needs.build-info.outputs.default-postgres-version }}
      PYTHON_MAJOR_MINOR_VERSION: "3.9"  # Hardcoded 3.9
      JOB_ID: "integration-providers-gremlin"
      SKIP_PROVIDERS_TESTS: "${{ needs.build-info.outputs.skip-providers-tests }}"
      ENABLE_COVERAGE: "${{ needs.build-info.outputs.run-coverage }}"
      DEBUG_RESOURCES: "${{ needs.build-info.outputs.debug-resources }}"
      GITHUB_REPOSITORY: ${{ github.repository }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GITHUB_USERNAME: ${{ github.actor }}
      VERBOSE: "true"
    steps:
      - name: "Cleanup repo"
        shell: bash
        run: docker run -v "${GITHUB_WORKSPACE}:/workspace" -u 0:0 bash -c "rm -rf /workspace/*"
      - name: "Checkout ${{ github.ref }} ( ${{ github.sha }} )"
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: "Pull CI Image"
        run: |
          IMAGE_NAME="ghcr.io/${{ github.repository }}/ci-image:python-3.9"  # Hardcoded 3.9
          docker pull "$IMAGE_NAME"
          docker image ls -a
      - name: "Prepare Breeze"
        uses: ./.github/actions/breeze
        with:
          use-uv: ${{ needs.build-info.outputs.use-uv }}
      - name: "Check Gremlin Files"
        run: ls -la /home/runner/work/airflow/airflow/scripts/ci/docker-compose/gremlin/
      - name: "Integration: providers gremlin"
        env:
          INTEGRATION: "gremlin"
        run: ./scripts/ci/testing/run_integration_tests_with_retry.sh providers "${INTEGRATION}"
      - name: "Check Gremlin Logs"
        run: |
          GREMLIN_CONTAINER=$(docker ps -aq --filter "name=gremlin" | head -n 1)
          if [[ -n "$GREMLIN_CONTAINER" ]]; then
            docker logs "$GREMLIN_CONTAINER"
          else
            echo "No Gremlin container found"
          fi
        if: always()
      - name: "Post Tests success"
        uses: ./.github/actions/post_tests_success
        with:
          codecov-token: ${{ secrets.CODECOV_TOKEN }}
          python-version: "3.9"  # Hardcoded 3.9
      - name: "Post Tests failure"
        uses: ./.github/actions/post_tests_failure
        if: failure()
